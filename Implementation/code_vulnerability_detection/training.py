from utils.embeddings import get_w2v_embeddings_from_path
from Implementation.code_vulnerability_detection.dataloader import VulnerabilityDataloader
from Models.transformer import TransormerClassifierModel

import pandas as pd

# # Load data loader
# dataloader = VulnerabilityDataloader('data/sample_index.csv','data/sample_index.csv',
#                                      batch_size=100, eval_portion=0.2, max_length=207)

dataframe = pd.read_csv('data/sample_index.csv')
# dataloader = VulnerabilityDataloader(dataframe, dataframe,
#                                      batch_size=100, eval_portion=0.2, max_length=207)


column_name = 'indexes'
dataloader = VulnerabilityDataloader(dataframe, column_name)
# get word2vec embedding list
embedding, vector_length = get_w2v_embeddings_from_path('data/word2vec.model', padding=True)

save_name = 'vul'
max_length = dataloader.get_max_length()
# Implement model
model = TransormerClassifierModel('models/' + save_name, 'logs/' + save_name, embedding=embedding,
                                  d_features=100, d_meta=None, max_length=max_length, d_classifier=256, n_classes=2,
                                  n_layers=6, n_head=8, dropout=0.1, use_bottleneck=True, d_bottleneck=128)

# Training
model.train(max_epoch=400, train_dataloader=dataloader.train_dataloader(), eval_dataloader=dataloader.val_dataloader(),
            device='cpu', save_mode='best', smoothing=False, earlystop=False)
# Evaluation

pred, real = model.get_predictions(dataloader.test_dataloader(), 'cpu')

import numpy as np

pred_ = np.array(pred)[:, 1]
real = np.array(real).astype(int)
from utils.plot_curves import precision_recall, plot_pr_curve

area, precisions, recalls, thresholds = precision_recall(pred_, real)
plot_pr_curve(recalls, precisions, auc=area)

from utils.plot_curves import auc_roc, plot_roc_curve

auc, fprs, tprs, thresholds = auc_roc(pred_, real)
plot_roc_curve(fprs, tprs, auc)

from Implementation.ciena.metrics import results

df = results(real, np.array(pred).argmax(axis=-1), 0.5)
